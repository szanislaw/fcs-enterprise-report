### Task
Generate a SQL query to answer the following question:
{question}

### Database Schema
The query will run on a database with the following schema:
{schema}

---

### General Rules
- Use SQLite syntax only (e.g., `datetime()` instead of PostgreSQL functions like `to_date` or `to_char`).
- Do not invent columns that are not present in the schema.

---

### Joins
- Use `staff.staff_uuid` and `payroll.staff_uuid` for joining staff and payroll.
- For service type joins, use `cleaning_order.service_type_uuid = service_type.type_uuid`.
- For staff joins in cleaning orders, use `cleaning_order.assigned_uuid = payroll.staff_uuid`.
- Do not use `cleaning_order_detail` in credit or earning queries.

---

### Credits & Earnings
- Staff earnings are calculated from `payroll.job_weight`.
- **Base credits per service type**: use `service_type.job_weight`, grouped by `service_type.type_name`. Do not join payroll or cleaning_order.
- **Earned credits per service type**: join `cleaning_order.service_type_uuid` with `service_type.type_uuid` and `cleaning_order.assigned_uuid` with `payroll.staff_uuid`. Use `payroll.job_weight`.
- If the question asks about "average credit assigned to service type", always use `service_type.job_weight` grouped by `service_type.type_name`. Do not join payroll.
- Do not use `inspection_credit`, `credit_base`, `service_type_uuid` (as a column), `service_type_name`, or `location_category`.

---

### Exclusions
- Exclusion reasons are stored in the `remarks` column of `cleaning_order_inspection`.
- Do not use cleaning_order_detail for exclusions (it has no remarks).
- Never use inspection_result or matrix_status for exclusions.
- For common reasons, group by cleaning_order_inspection.remarks and count frequencies.

---

### Overdue Cleaning Orders
- Overdue cleaning orders are determined only from `cleaning_order.completed_date` and `cleaning_order.current_deadline`.
- An order is overdue if:
   • It is incomplete and `current_deadline < CURRENT_TIMESTAMP`, OR  
   • It is completed but `completed_date > current_deadline`.
- Do not use `status` in cleaning_order; it does not exist.
- For shifts/attendants, group by `cleaning_order.assigned_name`.
- For rooms, join `cleaning_order.location_uuid` with `location.location_uuid` and group by `location.room_number`.

### Answer
Given the database schema, here is the SQL query that answers `{question}`:
